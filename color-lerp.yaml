# basic RGB linear iterpolation (lerp)

import:
    - https://tangrams.github.io/blocks/geometry/projections.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.topojson?
    data:
        type: TopoJSON
        url:  https://tangrams.github.io/tangram-sandbox/data/us-states-10m.json

camera:
    zoom: 4.6
    position: [-95.601, 39.122]

global:
    min: 0
    max: 50
    color: |
        function() {
            function lerp(a, b, t) {
                return [
                    a.r + (b.r - a.r) * t,
                    a.g + (b.g - a.g) * t,
                    a.b + (b.b - a.b) * t
                ];
            }

            // set colors to interpolate between
            a = {r:1, g:0, b:0};
            b = {r:0, g:0, b:1};

            var gradient = [];
            var steps = 10;
            for (x = 0; x < steps; x++) {
                y = (x)/(steps-1);
                gradient.push(lerp(a, b, y));
            }

            var value = feature.rate - global.min;
            value /= global.max - global.min;
            value = 1. - value;
            var i = Math.floor(value * gradient.length);
            i = Math.min(i, gradient.length - 1);
            i = Math.max(i, 0);
            return gradient[i];
        }

styles:
    toAlbers:
        mix: [geometry-projections]
        animated: true
        shaders:
            blocks:
                position: |
                    // mercator position of the current vertex, u_map_position = center of screen, position.xy = vertex screen position in meters from the center of the screen
                    vec2 mercator = u_map_position.xy + position.xy;
                    float lat = y2lat_m(mercator.y);
                    float lon = x2lon_m(mercator.x);
                    position.xy = latlon2albers(lat,lon,30.);
    albers:
        base: polygons
        mix: toAlbers
    albers-lines:
        base: lines
        mix: toAlbers

layers:
    counties:
        data: { source: data }
        draw:
            albers:
                order: 2
                color: global.color
            # fill gaps between polys created by the projection
            albers-lines:
                order: 1
                color: global.color
                width: 1px