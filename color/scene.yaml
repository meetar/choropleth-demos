# display a choropleth of census block areas with a ColorBrewer palette,
# with several interactive options

sources:
    states:
        type: GeoJSON
        url: gz_2010_us_040_00_20m.json # states
        scripts: ['../lib/colorbrewer.min.js']

global:
    minval: 100
    maxval: 100000
    divisions: 6
    brightness: 0
    color: '#ffae23'
scene:
    background:
        color: '#add8e6'

layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: 0
                color: grey
    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: 1
                color: lightblue
    states:
        enabled:
        data: { source: states }
        draw:
            polygons:
                order: 3
                color: |
                    function() {

                        function componentToHex(c) {
                            var hex = c.toString(16);
                            return hex.length == 1 ? "0" + hex : hex;
                        }

                        function rgbToHex(rgb) {
                            console.log('?', rgb);
                            return "#" + componentToHex(parseInt(rgb[0])) + componentToHex(parseInt(rgb[1])) + componentToHex(parseInt(rgb[2]));
                        }

                        function hexToRgb(hex) {
                            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                            return result ? [
                                parseInt(result[1], 16),
                                parseInt(result[2], 16),
                                parseInt(result[3], 16)
                            ] : null;
                        }

                        function rgbLuminance(rgb, lum) {
                            var val = [rgb[0] + rgb[0] * lum, rgb[1] + rgb[1] * lum, rgb[2] + rgb[2] * lum];
                            val = [Math.min(val[0], 255), Math.min(val[1], 255), Math.min(val[2], 255)]
                            return val;
                        }

                        function colorSaturation(hex, sat) {
                            // Validate hex string
                            hex = String(hex).replace(/[^0-9a-f]/gi, "");
                            if (hex.length < 6) {
                                hex = hex.replace(/(.)/g, '$1$1');
                            }
                            lum = lum || 0;
                            // Convert to decimal and change luminosity
                            var rgb = "#", c;
                            for (var i = 0; i < 3; ++i) {
                                c = parseInt(hex.substr(i * 2, 2), 16);
                                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                                console.log(rgb);
                                rgb += ("00" + c).substr(c.length);
                            }
                            return rgb;
                        }
                        var start_color = global.color;
                        var gradient = [];
                        var incr = global.brightness / global.divisions;
                        console.log(incr);
                        for (var i = 0; i < global.divisions; i++) {
                            gradient.push(rgbToHex(rgbLuminance(hexToRgb(start_color), incr * i)));
                        }
                        console.log(gradient)
                        var min = global.minval;
                        var max = global.maxval;
                        var f = feature.CENSUSAREA - min;
                        f /= max + min;
                        var i = Math.floor(f * gradient.length);
                        i = Math.min(i, gradient.length - 1);
                        i = Math.max(i, 0);
                        return gradient[i];
                        return [0, 1, 1]
                    }
            lines:
                order: 4
                width: [[3,.3px],[5,1px]]
                color: black