# display a choropleth of census block areas with a ColorBrewer palette,
# with several interactive options

sources:
    states:
        type: GeoJSON
        url: gz_2010_us_040_00_20m.json # states
        scripts: ['../lib/colorbrewer.min.js']

global:
    minval: 100
    maxval: 100000
    divisions: 6
    brightness: 0
    saturation: 0
    color: '#ffae23'
scene:
    background:
        color: '#add8e6'

layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: 0
                color: grey
    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: 1
                color: lightblue
    states:
        enabled:
        data: { source: states }
        draw:
            polygons:
                order: 3
                color: |
                    function() {

                        function componentToHex(c) {
                            var hex = c.toString(16);
                            return hex.length == 1 ? "0" + hex : hex;
                        }

                        function rgbToHex(rgb) {
                            return "#" + componentToHex(parseInt(rgb[0])) + componentToHex(parseInt(rgb[1])) + componentToHex(parseInt(rgb[2]));
                        }

                        function hexToRgb(hex) {
                            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                            return result ? [
                                parseInt(result[1], 16),
                                parseInt(result[2], 16),
                                parseInt(result[3], 16)
                            ] : null;
                        }

                        function rgbLuminance(rgb, lum) {
                            var val = [rgb[0] + rgb[0] * lum, rgb[1] + rgb[1] * lum, rgb[2] + rgb[2] * lum];
                            val = [Math.min(val[0], 255), Math.min(val[1], 255), Math.min(val[2], 255)]
                            return val;
                        }

                        function rgbSaturation(rgb, sat) {
                            sat = sat || 0;
                            // Convert to hsl and change luminosity
                            var hsl = rgbToHsl(rgb[0], rgb[1], rgb[2]);
                            hsl = [hsl[0], hsl[1] + hsl[1]*sat, hsl[2]];
                            hsl[1] = Math.min(hsl[1], 1);
                            hsl[2] = Math.min(hsl[2], 1);
                            var val = hslToRgb(hsl);
                            val = [Math.min(val[0], 255), Math.min(val[1], 255), Math.min(val[2], 255)];
                            return val;
                        }

                        function rgbToHsl(r, g, b){
                            r /= 255, g /= 255, b /= 255;
                            var max = Math.max(r, g, b), min = Math.min(r, g, b);
                            var h, s, l = (max + min) / 2;

                            if(max == min){
                                h = s = 0; // achromatic
                            }else{
                                var d = max - min;
                                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                                switch(max){
                                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                                    case g: h = (b - r) / d + 2; break;
                                    case b: h = (r - g) / d + 4; break;
                                }
                                h /= 6;
                            }
                            return [h, Math.min(s, 1), Math.min(l, 1)];
                        }

                        function hslToRgb(hsl){
                            var h = hsl[0], s = hsl[1], l = hsl[2];
                            var r, g, b;

                            if(s == 0){
                                r = g = b = l; // achromatic
                            }else{
                                function hue2rgb(p, q, t){
                                    if(t < 0) t += 1;
                                    if(t > 1) t -= 1;
                                    if(t < 1/6) return p + (q - p) * 6 * t;
                                    if(t < 1/2) return q;
                                    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                                    return p;
                                }

                                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                                var p = 2 * l - q;
                                r = hue2rgb(p, q, h + 1/3);
                                g = hue2rgb(p, q, h);
                                b = hue2rgb(p, q, h - 1/3);
                            }
                            return [r * 255, g * 255, b * 255];
                        }

                        var start_color = global.color;
                        var gradient = [];
                        for (var i = 0; i < global.divisions; i++) {
                            gradient[i] = start_color;
                        }
                        var incr = global.brightness / (global.divisions - 1);
                        if (incr != 0) {
                            for (var i = 1; i < global.divisions; i++) {
                                gradient[i] = rgbToHex(rgbLuminance(hexToRgb(gradient[0]), incr * i));
                            }
                        }
                        incr = global.saturation / (global.divisions - 1);
                        if (incr != 0) {
                            for (var i = 1; i < global.divisions; i++) {
                                gradient[i] = rgbToHex(rgbSaturation(hexToRgb(gradient[i]), incr * i));
                            }
                        }
                        console.log(gradient)
                        var min = global.minval;
                        var max = global.maxval;
                        var f = feature.CENSUSAREA - min;
                        f /= max + min;
                        var i = Math.floor(f * gradient.length);
                        i = Math.min(i, gradient.length - 1);
                        i = Math.max(i, 0);
                        return gradient[i];
                    }
            lines:
                order: 4
                width: [[3,.3px],[5,1px]]
                color: black