import:
    - https://tangrams.github.io/blocks/geometry/projections.yaml
sources:
    osm:
        type: TopoJSON
        url:  https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?
    data:
        type: TopoJSON
        url:  https://tangrams.github.io/tangram-sandbox/data/us-states-10m.json
scene:
    background:
        color: [0.541, 0.635, 0.635, 1.00]
global:
    min: 0
    max: 50
    color: |
        function() {
            // Interpolates two [r,g,b] colors and returns an [r,g,b] of the result
            // Taken from the awesome ROT.js roguelike dev library at
            // https://github.com/ondras/rot.js
            var _interpolateColor = function(color1, color2, factor) {
              if (arguments.length < 3) { factor = 0.5; }
              var result = color1.slice();
              for (var i=0;i<3;i++) {
                result[i] = Math.round(result[i] + factor*(color2[i]-color1[i]));
              }
              return result;
            };

            var rgb2hsl = function(color) {
              var r = color[0];
              var g = color[1];
              var b = color[2];
              var max = Math.max(r, g, b), min = Math.min(r, g, b);
              var h, s, l = (max + min) / 2;

              if (max == min) {
                h = s = 0; // achromatic aka grayscale
              } else {
                var d = max - min;
                s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));
                switch(max) {
                  case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                  case g: h = (b - r) / d + 2; break;
                  case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
              }
              return [h, s, l];
            };

            // https://stackoverflow.com/a/9493060/738675
            function hsl2rgb(color){
                var h = color[0];
                var s = color[1];
                var l = color[2];
                var r, g, b;
                if(s == 0){
                    r = g = b = l; // achromatic aka grayscale
                } else {
                    var hue2rgb = function hue2rgb(p, q, t){
                        if(t < 0) t += 1;
                        if(t > 1) t -= 1;
                        if(t < 1/6) return p + (q - p) * 6 * t;
                        if(t < 1/2) return q;
                        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                        return p;
                    }

                    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                    var p = 2 * l - q;
                    r = hue2rgb(p, q, h + 1/3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1/3);
                }
                return [r, g, b];
            }
            var _interpolateHSL = function(color1, color2, factor) {
              if (arguments.length < 3) { factor = 0.5; }
              var hsl1 = rgb2hsl(color1);
              var hsl2 = rgb2hsl(color2);
              for (var i=0;i<3;i++) {
                hsl1[i] += factor*(hsl2[i]-hsl1[i]);
              }
              return hsl2rgb(hsl1);
            };


            function lerp(a, b, t) {
                return [
                    a.r + (b.r - a.r) * t,
                    a.g + (b.g - a.g) * t,
                    a.b + (b.b - a.b) * t
                ];
            }

            a = [0, 0, 1]; // min
            b = [1, 0, 0]; // max

            var gradient = [];
            var steps = 10;
            if (global.min === global.max) return a;
            for (x = 0; x < steps; x++) {
                y = x/(steps-1);
                gradient.push(_interpolateHSL(a, b, y));
            }

            var value = feature.rate - global.min;
            //var value = feature.rate;
            value /= global.max - global.min;

            var i = Math.floor(value * gradient.length);

            i = Math.min(i, gradient.length - 1);
            i = Math.max(i, 0);

            return gradient[i];
        }

cameras:
    perspective:
        type: isometric
styles:
    toAlbers:
        mix: [geometry-projections]
        animated: true
        shaders:
            blocks:
                position: |
                    // mercator position of the current vertex, u_map_position = center of screen, position.xy = vertex screen position in meters from the center of the screen
                    vec2 mercator = u_map_position.xy + position.xy;
                    float lat = y2lat_m(mercator.y);
                    float lon = x2lon_m(mercator.x);
                    position.xy = latlon2albers(lat,lon);
    albers:
        base: polygons
        mix: toAlbers
        shaders: 
            blocks: 
                position: |
                    position.z = pow(position.z*7.,(1.-u_map_position.z*0.05)*3.);
                color: |
                    // color.rgb *= vec3(min((worldPosition().z*.02+.7),1.));
    albers-line:
        base: lines
        mix: toAlbers
        shaders: 
            blocks: 
                position: |
                    position.z = pow(position.z*7.,(1.-u_map_position.z*0.05)*3.);
                color: |
                    color.rgb *= .8;
        
layers:
    counties:
        data: { source: data }
        draw:
            albers:
                order: 2
                # extrude: function() { return feature.rate; }
                color: global.color
            albers-line:
                order: 1
                # extrude: function() { return feature.rate; }
                width: 1px
                color: global.color
