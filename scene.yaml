sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-AGr6avQ
    test:
        type: GeoJSON
        # url: https://rawgit.com/meetar/choropleth-demos/master/gz_2010_us_040_00_20m.json # states
        # url: https://rawgit.com/meetar/choropleth-demos/master/gz_2010_us_050_00_20m.json # counties
        url: https://rawgit.com/tangrams/choropleth-demos/master/blocks.json # counties
        scripts: ['https://rawgit.com/mbostock/5577023/raw/14bc68f5c7aa174c53fc6efe8dab8292295da950/colorbrewer.min.js']
camera:
    type: isometric
layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: 0
                color: grey
    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: 1
                color: lightblue
    test:
        data: { source: test }
        draw:
            text:
                visible: true
                # collide: false
                # text_source: CENSUSAREA
                text_source: |
                    function() {
                        var f = feature.value;
                        // console.log(v)
                        // return colorbrewer.YlGnBu['9'].length;
                        v = Math.pow(2, f);
                        return v;
                        return Math.floor(f);
                    }
                font:
                    fill: red
                    size: 10px
            polygons:
                order: 3
                color: |
                    function() {
                        var gradient = colorbrewer.YlGnBu['6'];
                        var min = 1;
                        var max = 32;
                        var value = feature.value;
                        value = Math.pow(2, value);
                        var e = value - min;
                        var f = value - min;

                        var minv = Math.log(1);
                        var maxv = Math.log(32);

                        // calculate adjustment factor
                        // based on https://stackoverflow.com/questions/846221/logarithmic-slider
                        var scale = (maxv-minv) / (max-min);

                        var s = (Math.log(value)-minv) / (scale + min);


                        s /= maxv;
                        console.log('maxv:', maxv)

                        console.log('max:', max)
                        f /= max;
                        console.log(e, f, s)

                        var log = true;
                        // log = false;

                        if (log) {
                            var j = Math.floor(s * gradient.length)- 0;
                            console.log('j:', j)
                            j = Math.min(j, gradient.length - 1);
                            console.log('j:', j)
                            j = Math.max(j, 0);
                            console.log('j:', j, '\n\n')
                            return gradient[j];
                        } else {

                            var i = Math.floor(f * gradient.length)- 0;
                            console.log('i:', i)
                            i = Math.min(i, gradient.length - 1);
                            console.log('i:', i)
                            i = Math.max(i, 0);
                            console.log('i:', i, '\n\n');
                            return gradient[i];
                        }

                    }

            lines:
                visible: true
                order: 4
                width: [[3,.3px],[5,1px]]
                color: black
